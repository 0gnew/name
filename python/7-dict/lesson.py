# lesson.py  
  
###########################################  
# Задание 1: Слияние словарей  
###########################################  
# Напишите функцию merge_dicts(dict1, dict2), которая принимает два словаря и возвращает новый словарь, являющийся слиянием dict1 и dict2.  
# Если в обоих словарях есть одинаковые ключи, значения из dict2 должны заменить значения из dict1.  
  
# Пример:  
# merge_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4})  
# Должно вернуть: {'a': 1, 'b': 3, 'c': 4}  
  
def merge_dicts(dict1, dict2):  
    pass  
  
  
###########################################  
# Задание 2: Фильтрация словаря  
###########################################  
# Напишите функцию filter_dict(d, threshold), которая принимает словарь d и число threshold.  
# Функция должна вернуть новый словарь, содержащий только те элементы, у которых значение больше threshold.  
  
# Пример:  
# filter_dict({'a': 5, 'b': 2, 'c': 10}, 4)  
# Должно вернуть: {'a': 5, 'c': 10}  
  
def filter_dict(d, threshold):  
    pass  
  
  
###########################################  
# Задание 3: Инверсия словаря  
###########################################  
# Напишите функцию invert_dict(d), которая принимает словарь и возвращает новый словарь, где ключи и значения поменяны местами.  
  
# Пример:  
# invert_dict({'a': 1, 'b': 2, 'c': 3})  
# Должно вернуть: {1: 'a', 2: 'b', 3: 'c'}  
  
def invert_dict(d):  
    pass  
  
  
###########################################  
# Задание 4*: Нахождение пересечения словарей  
###########################################  
# Напишите функцию intersect_dicts(dict1, dict2), которая принимает два словаря и возвращает новый словарь, содержащий только те пары ключ-значение,  
# которые присутствуют в обоих словарях и имеют одинаковые значения.  
  
# Пример:  
# intersect_dicts({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 3, 'd': 4})  
# Должно вернуть: {'a': 1}  
  
def intersect_dicts(dict1, dict2):  
    pass  
  
  
# Импортируем тесты из examination.py  
from examination import run_tests  
  
# Обернем тесты в try-except  
try:  
    run_tests(merge_dicts, filter_dict, invert_dict, intersect_dicts)  
except AssertionError as e:  
    print(e)  